{"version":3,"sources":["CollegeTable.tsx","CollegeDataProvider.tsx","constants.tsx","Form.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CollegeTable","columns","data","fetchData","loading","controlledPageCount","pageCount","useTable","initialState","pageIndex","manualPagination","autoResetPage","usePagination","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","page","canPreviousPage","canNextPage","pageOptions","gotoPage","nextPage","previousPage","setPageSize","state","pageSize","React","useEffect","TableHead","map","headerGroup","TableRow","getHeaderGroupProps","headers","column","TableCell","getHeaderProps","render","TableBody","row","i","getRowProps","cells","cell","getCellProps","colSpan","length","className","onClick","disabled","type","defaultValue","onChange","e","target","value","Number","style","width","filter","Header","id","accessor","object","rate","split","reduce","xs","x","toFixed","SATFilter","Unknown","a","b","flatMap","d","flat","cartesian","percentile","name","join","apiUrl","process","unflatten","obj","Object","Array","isArray","regex","resultholder","p","m","cur","prop","exec","compareSchool","school","key","latest","admissions","sat_scores","postProcessResults","results","SAT_Math","SAT_Reading","Reach","Target","Safety","math","reading","admission_rate","consumer_rate","undefined","getType","apiRequest","url","fetch","res","json","postData","status","Math","ceil","metadata","total","per_page","error","CollegeDataProvider","useState","setData","setLoading","setPageCount","fetchIdRef","useRef","useCallback","fetchId","current","ButtonsResult","reset","defaultValues","CalculatorForm","useForm","handleSubmit","control","scores","startValue","stopValue","cardinality","arr","step","push","makeArr","reverse","onSubmit","console","log","as","Select","MenuItem","props","Checkbox","checked","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bc66af7b.chunk.js","sourcesContent":["import React from \"react\";\n\nimport { useTable, usePagination } from \"react-table\";\n\nimport MaUTable from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport \"./react-table-config.d\";\n\n\nexport function CollegeTable({\n  columns,\n  data,\n  fetchData,\n  loading,\n  pageCount: controlledPageCount,\n}) {\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    state: {\n      pageIndex,\n      pageSize,\n    },\n  } = useTable({\n      columns,\n      data,\n      initialState: { pageIndex: 0},\n      manualPagination: true,\n      autoResetPage: true,\n      pageCount: controlledPageCount,\n    },\n    usePagination,\n  );\n\n  React.useEffect(() => {\n    fetchData({ pageIndex, pageSize});\n  }, [fetchData, pageIndex, pageSize]);\n\n  return (\n    <>\n      <MaUTable {...getTableProps()}>\n        <TableHead>\n          {headerGroups.map(headerGroup => (\n            <TableRow {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                <TableCell {...column.getHeaderProps()}>\n                  {column.render(\"Header\")}\n                </TableCell>\n              ))}\n            </TableRow>\n          ))}\n        </TableHead>\n        <TableBody {...getTableBodyProps()}>\n          {rows.map((row, i) => {\n            prepareRow(row);\n            return (\n              <TableRow {...row.getRowProps()}>\n                {row.cells.map(cell => {\n                  return (\n                    <TableCell {...cell.getCellProps()}>\n                      {cell.render(\"Cell\")}\n                    </TableCell>\n                  );\n                })}\n              </TableRow>\n            );\n          })}\n          <TableRow>\n            {loading ? (\n              <TableCell colSpan={10000}>Loading...</TableCell>\n            ) : (\n              <TableCell colSpan={10000}>\n                Showing {page.length} of ~{controlledPageCount * pageSize}{' '} results\n              </TableCell>\n            )}\n          </TableRow>\n        </TableBody>\n      </MaUTable>\n      <div className=\"pagination\">\n        <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\n          {'<<'}\n        </button>{' '}\n        <button onClick={() => previousPage()} disabled={!canPreviousPage}>\n          {'<'}\n        </button>{' '}\n        <button onClick={() => nextPage()} disabled={!canNextPage}>\n          {'>'}\n        </button>{' '}\n        <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\n          {'>>'}\n        </button>{' '}\n        <span>\n          Page{' '}\n          <strong>\n            {pageIndex + 1} of {pageOptions.length}\n          </strong>{' '}\n        </span>\n        <span>\n          | Go to page:{' '}\n          <input\n            type=\"number\"\n            defaultValue={pageIndex + 1}\n            onChange={e => {\n              const page = e.target.value ? Number(e.target.value) - 1 : 0\n              gotoPage(page)\n            }}\n            style={{ width: '100px' }}\n          />\n        </span>{' '}\n        <select\n          value={pageSize}\n          onChange={e => {\n            setPageSize(Number(e.target.value))\n          }}\n        >\n          {[10, 20, 30, 40, 50]\n            .filter((value) => value <= controlledPageCount * pageSize)\n            .map(pageSize => (\n              <option key={pageSize} value={pageSize}>\n                Show {pageSize}\n              </option>\n            ))}\n        </select>\n      </div>\n    </>\n  );\n};","import React from \"react\";\nimport { baseUrl, APIKey } from \"./constants\";\nimport {CollegeTable} from \"./CollegeTable\"\nimport type {FormInputs} from \"./Form\";\n\n\n/**\n  Utility function to extract elements from an object.\n\n  @param object - The javascript object from which to extra an element\n  @param path - The path to find\n\n  @returns The extract object at the path, or null if the path is undefined\n*/\nfunction get(object: any, path: string): any | null {\n  return path.split('.').reduce((xs, x) => ((xs != null && xs[x] != null) ? xs[x] : null), object);\n}\n\n/** Cartesian product */\nconst cartesian =\n  (...a) => a.reduce((a, b) => a.flatMap(d => b.map(e => [d, e].flat())));\n\n/* Computes the admit rate */\nfunction adminRateAccessor(row): string {\n  const rate = get(row, \"latest.admissions.admission_rate.consumer_rate\");\n  if (rate == null) {\n    return \"N/A\";\n  }\n  return `${(100*(rate as number)).toFixed(2)}%`;\n}\n\nconst columns = [\n  {\n    Header: \"Recommended Colleges\",\n    columns: [\n      {\n        id: \"schoolname\",\n        Header: \"School Name\",\n        accessor: \"school.name\",\n      },\n      {\n        id: \"type\",\n        Header: \"Application Type\",\n        accessor: \"type\",\n      },\n      {\n        id: \"adminrate\",\n        Header: \"Admissions Rate\",\n        accessor: adminRateAccessor,\n      },\n      {\n        Header: \"SAT Math\",\n        columns: [\n          {\n            id: \"satmath25\",\n            Header: \"SAT 25th Math\",\n            accessor: \"latest.admissions.sat_scores.25th_percentile.math\",\n          },\n          {\n            id: \"satmath75\",\n            Header: \"SAT 75th Math\",\n            accessor: \"latest.admissions.sat_scores.75th_percentile.math\",\n          },    \n        ]\n      },\n      {\n        Header: \"SAT Reading\",\n        columns: [\n          {\n            id: \"satreading25\",\n            Header: \"SAT 25th Reading\",\n            accessor: \"latest.admissions.sat_scores.25th_percentile.critical_reading\",\n          },\n          {\n            id: \"satreading75\",\n            Header: \"SAT 75th Reading\",\n            accessor: \"latest.admissions.sat_scores.75th_percentile.critical_reading\",\n          },    \n        ]\n      },\n    ]\n  }\n];\n\ntype School = \"Target\" | \"Reach\" | \"Safety\" | \"Unknown\";\nconst SATFilter = ({Unknown}: FormInputs) => {\n  const prefix = \"latest.admissions.sat_scores\";\n  const percentiles = [\"25th_percentile\", \"midpoint\", \"75th_percentile\"];\n  const names = [\"math\", \"critical_reading\", \"writing\"];\n  const ranges = cartesian(percentiles, names).map(\n    ([percentile, name]) => `${prefix}.${percentile}.${name}__range=200..800`\n  );\n  return ranges.join(\"&\")\n};\n\nexport type APIResponse = { status: \"LOADING\" } | { status: \"LOADED\"; pageCount: number, data: any } | {status: \"ERROR\"; error: any };\n\nfunction apiUrl(pageSize: number, pageIndex: number, filter: FormInputs): string {\n  const fields = [\n    'latest.admissions',\n    'latest.earnings.10_yrs_after_entry.median',\n    'school.city',\n    'school.state',\n    'school.school_url',\n    'school.name',\n  ];\n  const sortField = \"latest.admissions.admission_rate.consumer_rate\"\n  // Only pull down reach schools.\n  // eg. https://api.data.gov/ed/collegescorecard/v1/schools.json?school.degrees_awarded.predominant=2,3&fields=id,school.name,2013.student.size\n  return `${baseUrl}.json?api_key=${APIKey}&_fields=${fields.join(',')}&per_page=${pageSize}&page=${pageIndex}&${SATFilter(filter)}&sort=${sortField}:asc`;\n}\n\n/**\n  Unflattens the the given JSON Object.filter\n\n  @params obj - The object containing flattend keys of the form 'a.b.c.d'\n\n  @returns The unflatted object.\n*/\nfunction unflatten(obj) {\n  if (Object(obj) !== obj || Array.isArray(obj))\n      return obj;\n  var regex = /\\.?([^.\\[\\]]+)|\\[(\\d+)\\]/g,\n      resultholder = {};\n  for (var p in obj) {\n      var cur = resultholder,\n          prop = \"\",\n          m;\n      while (m = regex.exec(p)) {\n          cur = cur[prop] || (cur[prop] = (m[2] ? [] : {}));\n          prop = m[2] || m[1];\n      }\n      cur[prop] = obj[p];\n  }\n  return resultholder[\"\"] || resultholder;\n};\n\nfunction maxSchool(a: School, b: School): School {\n  if (a === \"Reach\" || b === \"Reach\") {\n    return \"Reach\" as const\n  }\n  if (a === \"Target\" || b === \"Target\") {\n    return \"Target\" as const;\n  }\n  if (a === \"Safety\" || b === \"Safety\") {\n    return \"Safety\" as const;\n  }\n  return \"Unknown\" as const;\n}\n\nfunction compareSchool(school: any, key: string, value: number): School {\n  if (school.latest.admissions.sat_scores[\"75th_percentile\"][key] < value) {\n    return \"Safety\" as const\n  }\n  if ( value <= school.latest.admissions.sat_scores[\"25th_percentile\"][key]) {\n    return \"Reach\" as const\n  }\n  return \"Target\" as const\n}\n\nfunction getType(school: any, math: number | undefined, reading: number | undefined): School {\n  if (school.latest.admissions.admission_rate.consumer_rate < 0.10) {\n    return \"Reach\" as const;\n  }\n  if (math === undefined && reading === undefined) {\n    return \"Unknown\" as const;\n  }\n  if (reading !== undefined && math !== undefined) {\n    return maxSchool(\n      compareSchool(school, \"critical_reading\", reading),\n      compareSchool(school, \"math\", math)\n    );\n  }\n  if (reading !== undefined) {\n    return compareSchool(school, \"critical_reading\", reading);\n  }\n  if (math !== undefined) {\n    return compareSchool(school, \"math\", math);\n  }\n  return \"Unknown\" as const;\n}\n\n\n/** Function that adds derived fields to the downloaded data */\nfunction postProcessResults<T>(results: T[], filter: FormInputs): (T & {type: School})[] {\n  const {\n    SAT_Math,\n    SAT_Reading,\n    Reach,\n    Target,\n    Safety,\n    Unknown,\n  } = filter;\n  const typedSchools = results.map((value: any) => {\n    value.type = getType(value, SAT_Math, SAT_Reading);\n    return value;\n  });\n  const filtered = typedSchools.filter((value) => {\n    return (\n      (Reach && value.type === \"Reach\") || \n      (Target && value.type === \"Target\") ||\n      (Safety && value.type === \"Safety\") ||\n      (Unknown && value.type === \"Unknown\")\n    );\n  });\n  return filtered;\n}\n\n/**\n  Makes a GET request as per the specified URL to retrieve the APIResponse.\n\n  @params url - The url to request.\n\n  @returns: A APIResponse depending on the URL response.\n\n*/\nasync function apiRequest(pageSize: number, pageIndex: number, filter: FormInputs): Promise<APIResponse> {\n  const url = apiUrl(pageSize, pageIndex, filter)\n  try {\n    const res = await fetch(url);\n    const json = await res.json();\n    const postData = postProcessResults(json.results.map(unflatten), filter);\n    return {\n      status: \"LOADED\",\n      pageCount: Math.ceil(json.metadata.total / json.metadata.per_page),\n      data: postData,\n     } as APIResponse;\n  } catch(err) {\n    return { status: \"ERROR\", error: err } as APIResponse;\n  }\n}\n\n\ninterface CollegeDataProviderProps {\n  filter: FormInputs\n}\nexport function CollegeDataProvider({ filter }: CollegeDataProviderProps) {\n  // We'll start our table without any data\n  const [data, setData] = React.useState([])\n  const [loading, setLoading] = React.useState(false)\n  const [pageCount, setPageCount] = React.useState(0)\n  const fetchIdRef = React.useRef(0)\n\n  const fetchData = React.useCallback(async ({ pageSize, pageIndex }) => {\n    // Give this fetch an ID\n    const fetchId = ++fetchIdRef.current;\n\n    // Set the loading state\n    setLoading(true);\n\n    // Grab Results.\n    const res = await apiRequest(pageSize, pageIndex, filter);\n\n    if (fetchId === fetchIdRef.current && res.status === 'LOADED') {\n      setData(res.data);\n      setPageCount(res.pageCount);\n      setLoading(false);\n    }\n  }, [filter]);\n\n  return (\n    <CollegeTable\n      columns={columns}\n      data={data}\n      fetchData={fetchData}\n      loading={loading}\n      pageCount={pageCount}\n    />\n  )\n}\n\n\n","// URL for Colelge ScoreCard API.\nexport const baseUrl: string = \"https://api.data.gov/ed/collegescorecard/v1/schools\"\n\nexport const APIKey: string = process.env.REACT_APP_SCORECARD_APIKEY || '';\n","import React, { useState } from \"react\";\nimport { useForm, Controller } from \"react-hook-form\";\n\nimport {\n  Select, \n  Checkbox,\n  MenuItem,\n} from \"@material-ui/core\";\n\n\nfunction makeArr(startValue: number, stopValue: number, cardinality: number): number[] {\n  var arr: number[] = [];\n  var step = (stopValue - startValue) / (cardinality - 1);\n  for (var i = 0; i < cardinality; i++) {\n    arr.push(startValue + (step * i));\n  }\n  return arr;\n}\n\nfunction ButtonsResult({ data, reset }) {\n  return (\n    <button className=\"button\">submit</button>\n  );\n}\n\nexport type FormInputs = {\n  SAT_Math?: number;\n  SAT_Reading?: number;\n  SAT_Writing?: number;\n  Reach: boolean;\n  Target: boolean;\n  Safety: boolean;\n  Unknown: boolean;\n};\nexport const defaultValues: FormInputs = {\n  Reach: true,\n  Target: true,\n  Safety: true,\n  Unknown: true,\n};\n\n\ninterface CalculatorFormProps {\n  data: any,\n  setData: any,\n};\nexport function CalculatorForm({ data, setData }: CalculatorFormProps) {\n  const { handleSubmit, reset, control } = useForm<FormInputs>({defaultValues});\n  const scores = makeArr(200, 800, 61);\n  scores.reverse();\n  const menus = [{\n    name: 'Math', type: 'SAT_Math' as const\n  }, {\n    name: 'Reading', type: 'SAT_Reading' as const\n  }, {\n    name: 'Writing', type: 'SAT_Writing' as const\n  }];\n  // TODO(nautilik): Eventually let the user check stuff.\n  const types = [\"Reach\" as const, \"Target\" as const, \"Safety\" as const, \"Unknown\" as const]\n\n  return (\n    <form onSubmit={handleSubmit((data) => {\n      setData(data);\n      console.log(data);\n    })} className=\"form\">\n      <div className=\"container\">\n        {menus.map(({name, type}) => (\n          <section>\n            <label>SAT {name} Score: </label>\n            <Controller\n              name={type}\n              control={control}\n              as={\n                <Select>\n                  <MenuItem></MenuItem>\n                  {scores.map((value: number) => (\n                    <MenuItem key={`SAT-${name}-${value}`} value={value}>{value}</MenuItem>\n                  ))}\n                </Select>\n              }\n            />\n          </section>   \n        ))}\n        {types.map((type) => (\n          <section>\n            <label>{type}</label>\n            <Controller\n              name={type}\n              control={control}\n              render={(props) => (\n                <Checkbox\n                  disabled={true}\n                  onChange={(e) => props.onChange(e.target.checked)}\n                  checked={props.value}\n                />\n              )}\n            />\n          </section>\n        ))}\n      </div>\n\n      <ButtonsResult {...{ data, reset }} />\n    </form>\n  );\n}","import React from 'react';\nimport './App.css';\nimport { CollegeDataProvider } from './CollegeDataProvider';\nimport { CalculatorForm, defaultValues } from \"./Form\";\nimport type {FormInputs} from \"./Form\";\n\nfunction App() {\n  const [data, setData] = React.useState<FormInputs>(defaultValues);\n  return (\n    <>\n      <CalculatorForm setData={setData} data={data} />\n      <CollegeDataProvider filter={data} />\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}